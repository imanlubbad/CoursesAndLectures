// Generated by view binder compiler. Do not edit!
package com.m_learning.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.HorizontalScrollView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.m_learning.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCourseDetailsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnRegisterView;

  @NonNull
  public final LinearLayout frame;

  @NonNull
  public final HorizontalScrollView hScrollView;

  @NonNull
  public final ImageButton ibtnBack;

  @NonNull
  public final ImageButton ibtnMore;

  @NonNull
  public final ImageView img;

  @NonNull
  public final ImageView imgProduct;

  @NonNull
  public final LinearLayout llAddAssignment;

  @NonNull
  public final LinearLayout llCourseDocument;

  @NonNull
  public final LinearLayout llLecturer;

  @NonNull
  public final LinearLayout llMyAssignment;

  @NonNull
  public final LinearLayout llStudentNo;

  @NonNull
  public final LinearLayout llViews;

  @NonNull
  public final CircularProgressIndicator progressCircular;

  @NonNull
  public final LinearLayout root;

  @NonNull
  public final TextView tvCourseCode;

  @NonNull
  public final TextView tvCourseDoc;

  @NonNull
  public final TextView tvDeadline;

  @NonNull
  public final TextView tvDescription;

  @NonNull
  public final TextView tvFileName;

  @NonNull
  public final TextView tvLecturerName;

  @NonNull
  public final TextView tvName;

  @NonNull
  public final TextView tvStudentNo;

  @NonNull
  public final TextView tvViewNo;

  private ActivityCourseDetailsBinding(@NonNull LinearLayout rootView,
      @NonNull Button btnRegisterView, @NonNull LinearLayout frame,
      @NonNull HorizontalScrollView hScrollView, @NonNull ImageButton ibtnBack,
      @NonNull ImageButton ibtnMore, @NonNull ImageView img, @NonNull ImageView imgProduct,
      @NonNull LinearLayout llAddAssignment, @NonNull LinearLayout llCourseDocument,
      @NonNull LinearLayout llLecturer, @NonNull LinearLayout llMyAssignment,
      @NonNull LinearLayout llStudentNo, @NonNull LinearLayout llViews,
      @NonNull CircularProgressIndicator progressCircular, @NonNull LinearLayout root,
      @NonNull TextView tvCourseCode, @NonNull TextView tvCourseDoc, @NonNull TextView tvDeadline,
      @NonNull TextView tvDescription, @NonNull TextView tvFileName,
      @NonNull TextView tvLecturerName, @NonNull TextView tvName, @NonNull TextView tvStudentNo,
      @NonNull TextView tvViewNo) {
    this.rootView = rootView;
    this.btnRegisterView = btnRegisterView;
    this.frame = frame;
    this.hScrollView = hScrollView;
    this.ibtnBack = ibtnBack;
    this.ibtnMore = ibtnMore;
    this.img = img;
    this.imgProduct = imgProduct;
    this.llAddAssignment = llAddAssignment;
    this.llCourseDocument = llCourseDocument;
    this.llLecturer = llLecturer;
    this.llMyAssignment = llMyAssignment;
    this.llStudentNo = llStudentNo;
    this.llViews = llViews;
    this.progressCircular = progressCircular;
    this.root = root;
    this.tvCourseCode = tvCourseCode;
    this.tvCourseDoc = tvCourseDoc;
    this.tvDeadline = tvDeadline;
    this.tvDescription = tvDescription;
    this.tvFileName = tvFileName;
    this.tvLecturerName = tvLecturerName;
    this.tvName = tvName;
    this.tvStudentNo = tvStudentNo;
    this.tvViewNo = tvViewNo;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCourseDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCourseDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_course_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCourseDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_register_view;
      Button btnRegisterView = ViewBindings.findChildViewById(rootView, id);
      if (btnRegisterView == null) {
        break missingId;
      }

      id = R.id.frame;
      LinearLayout frame = ViewBindings.findChildViewById(rootView, id);
      if (frame == null) {
        break missingId;
      }

      id = R.id.hScrollView;
      HorizontalScrollView hScrollView = ViewBindings.findChildViewById(rootView, id);
      if (hScrollView == null) {
        break missingId;
      }

      id = R.id.ibtn_back;
      ImageButton ibtnBack = ViewBindings.findChildViewById(rootView, id);
      if (ibtnBack == null) {
        break missingId;
      }

      id = R.id.ibtn_more;
      ImageButton ibtnMore = ViewBindings.findChildViewById(rootView, id);
      if (ibtnMore == null) {
        break missingId;
      }

      id = R.id.img;
      ImageView img = ViewBindings.findChildViewById(rootView, id);
      if (img == null) {
        break missingId;
      }

      id = R.id.img_product;
      ImageView imgProduct = ViewBindings.findChildViewById(rootView, id);
      if (imgProduct == null) {
        break missingId;
      }

      id = R.id.ll_add_assignment;
      LinearLayout llAddAssignment = ViewBindings.findChildViewById(rootView, id);
      if (llAddAssignment == null) {
        break missingId;
      }

      id = R.id.ll_course_document;
      LinearLayout llCourseDocument = ViewBindings.findChildViewById(rootView, id);
      if (llCourseDocument == null) {
        break missingId;
      }

      id = R.id.ll_lecturer;
      LinearLayout llLecturer = ViewBindings.findChildViewById(rootView, id);
      if (llLecturer == null) {
        break missingId;
      }

      id = R.id.ll_my_assignment;
      LinearLayout llMyAssignment = ViewBindings.findChildViewById(rootView, id);
      if (llMyAssignment == null) {
        break missingId;
      }

      id = R.id.ll_student_no;
      LinearLayout llStudentNo = ViewBindings.findChildViewById(rootView, id);
      if (llStudentNo == null) {
        break missingId;
      }

      id = R.id.ll_views;
      LinearLayout llViews = ViewBindings.findChildViewById(rootView, id);
      if (llViews == null) {
        break missingId;
      }

      id = R.id.progress_circular;
      CircularProgressIndicator progressCircular = ViewBindings.findChildViewById(rootView, id);
      if (progressCircular == null) {
        break missingId;
      }

      LinearLayout root = (LinearLayout) rootView;

      id = R.id.tv_courseCode;
      TextView tvCourseCode = ViewBindings.findChildViewById(rootView, id);
      if (tvCourseCode == null) {
        break missingId;
      }

      id = R.id.tvCourse_doc;
      TextView tvCourseDoc = ViewBindings.findChildViewById(rootView, id);
      if (tvCourseDoc == null) {
        break missingId;
      }

      id = R.id.tv_deadline;
      TextView tvDeadline = ViewBindings.findChildViewById(rootView, id);
      if (tvDeadline == null) {
        break missingId;
      }

      id = R.id.tv_description;
      TextView tvDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvDescription == null) {
        break missingId;
      }

      id = R.id.tvFileName;
      TextView tvFileName = ViewBindings.findChildViewById(rootView, id);
      if (tvFileName == null) {
        break missingId;
      }

      id = R.id.tv_lecturer_name;
      TextView tvLecturerName = ViewBindings.findChildViewById(rootView, id);
      if (tvLecturerName == null) {
        break missingId;
      }

      id = R.id.tv_name;
      TextView tvName = ViewBindings.findChildViewById(rootView, id);
      if (tvName == null) {
        break missingId;
      }

      id = R.id.tv_student_no;
      TextView tvStudentNo = ViewBindings.findChildViewById(rootView, id);
      if (tvStudentNo == null) {
        break missingId;
      }

      id = R.id.tv_view_no;
      TextView tvViewNo = ViewBindings.findChildViewById(rootView, id);
      if (tvViewNo == null) {
        break missingId;
      }

      return new ActivityCourseDetailsBinding((LinearLayout) rootView, btnRegisterView, frame,
          hScrollView, ibtnBack, ibtnMore, img, imgProduct, llAddAssignment, llCourseDocument,
          llLecturer, llMyAssignment, llStudentNo, llViews, progressCircular, root, tvCourseCode,
          tvCourseDoc, tvDeadline, tvDescription, tvFileName, tvLecturerName, tvName, tvStudentNo,
          tvViewNo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
